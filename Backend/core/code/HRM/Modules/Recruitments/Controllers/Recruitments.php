<?php
/*
* Copyright (C) 2020 @hailongtrinh
* Controller create by CLI - ERP
* Module name : recruitment
* Controller name : Recruitment
* Time created : 12/04/2021 06:04:43
*/

namespace HRM\Modules\Recruitments\Controllers;

use App\Controllers\ErpController;
use App\Models\AppModel;
use HRM\Modules\Recruitments\Models\RecruitmentModel;
use HRM\Modules\Recruitments\Config\DocxConversion;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;
use stdClass;

class Recruitments extends ErpController
{
	private $activityLang;

	public function initController(\CodeIgniter\HTTP\RequestInterface $request, \CodeIgniter\HTTP\ResponseInterface $response, \Psr\Log\LoggerInterface $logger)
	{
		parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
		$langPrefix = 'modules.recruitments.activity.log.';
		helper('text');
		$this->activityLang = [
			'jobCreated' => ' {' . $langPrefix . 'jobCreated} ',
			'assignedCandidate' => ' {' . $langPrefix . 'assignedCandidate} ',
			'toThisJob' => ' {' . $langPrefix . 'toThisJob} ',
			'movedCandidate' => ' {' . $langPrefix . 'movedCandidate} ',
			'fromStage' => ' {' . $langPrefix . 'fromStage} ',
			'to' => ' {' . $langPrefix . 'to} ',
			'and' => ' {' . $langPrefix . 'and} ',
			'by' => ' {' . $langPrefix . 'by} ',
			'byInterviewer' => ' {' . $langPrefix . 'byInterviewer} ',
			'changeJobStatusFrom' => ' {' . $langPrefix . 'changeJobStatusFrom} ',
			'andSetAnInterviewScheduleAt' => ' {' . $langPrefix . 'andSetAnInterviewScheduleAt} ',
			'andRemoveInterviewSchedule' => ' {' . $langPrefix . 'andRemoveInterviewSchedule} ',
			'hasBeenAddedAsEmployee' => ' {' . $langPrefix . 'hasBeenAddedAsEmployee} ',
			'sendAnEmailToCandidate' => ' (<i class="fad fa-envelope"></i>) ',
			'closedJob' => ' {' . $langPrefix . 'closed_job}  '
		];
	}

	public function load_approve_get()
	{

		helper('app_select_option');
		$moduleName = 'recruitments';
		$module = \Config\Services::modules($moduleName);
		$getPara = $this->request->getGet();
		$userID = user_id();

		if (!hasPermission('modules.recruitments.approve')) {
			return $this->failForbidden(MISSING_LIST_PERMISSION);
		}
		$recruitmentModel = $module->model;
		if (isset($getPara['filters'])) {
			foreach ($getPara['filters'] as $key => $val) {
				if ($val) {
					$recruitmentModel->where('m_recruitments.' . $key, $val);
				}
			}
		}
		if (isset($getPara['dateFrom']) && isset($getPara['dateTo']) && $getPara['dateFrom'] && $getPara['dateTo']) {
			$minvalue = $getPara['dateFrom'];
			$maxvalue = $getPara['dateTo'];
			$recruitmentModel->groupStart();
			$recruitmentModel->where("recruitment_to BETWEEN '$minvalue' AND '$maxvalue'", null, false);
			$recruitmentModel->orWhere("DATE(m_recruitments.created_at) BETWEEN '$minvalue' AND '$maxvalue'", null, false);
			$recruitmentModel->groupEnd();
		}

		if (isset($getPara['type'])) {
			if ($getPara['type'] !== 'request') {
				$recruitmentModel->where("JSON_SEARCH(send_to, 'all', '{$userID}', null, '$[*]') IS NOT NULL ");
				$recruitmentModel->where("m_recruitments.status != ", getOptionValue($moduleName, 'status', 'approve'));
				$recruitmentModel->where("m_recruitments.status != ", getOptionValue($moduleName, 'status', 'closed'));
			} else {
				$recruitmentModel->where("m_recruitments.owner", user_id());
			}
		}

		if (isset($getPara['search']) && $getPara['search']) {
			$recruitmentModel->groupStart();
			$recruitmentModel->like('recruitment_code ', $getPara['search']);
			$recruitmentModel->orLike('descriptions ', $getPara['search']);
			$recruitmentModel->orLike('requirements ', $getPara['search']);
			$recruitmentModel->orLike('benefits ', $getPara['search']);
			$recruitmentModel->groupEnd();
		}

		$recordsTotal = $recruitmentModel->countAllResults(false);

		$page = (isset($getPara['page'])) ? $getPara['page'] : 1;

		$length = (isset($getPara['limit'])) ? $getPara['limit'] : 0;
		if (isset($getPara['page'])) {
			$start = ($page - 1) * $length;
		} else {
			$start = (isset($data['start'])) ? $data['start'] : 0;
		}
		//	$dataArr['$sql'] = $recruitmentModel->getCompiledSelect();

		$data = $recruitmentModel->select('*, m_recruitments.gender as gender, m_recruitments.id as id, m_recruitments.status as status')->join('m_employees', 'm_employees.users_id = m_recruitments.owner', 'left')->orderBy('m_recruitments.created_at', 'desc')->findAll($length, $start);

		$dataArr['results'] = handleDataBeforeReturn($module, $data, true);
		$dataArr['recordsTotal'] = $recordsTotal;
		return $this->respond($dataArr);
	}

	public function loadJob_get()
	{

		helper('app_select_option');
		$moduleName = 'recruitments';
		$module = \Config\Services::modules($moduleName);
		$getPara = $this->request->getGet();
		$userID = user_id();
		if (isset($getPara['type']) && $getPara['type'] == 'request') {
			if (!hasPermission('modules.recruitments.request')) {
				return $this->failForbidden(MISSING_LIST_PERMISSION);
			}
		} else {
			if (!hasPermission('modules.recruitments.jobs')) {
				return $this->failForbidden(MISSING_LIST_PERMISSION);
			}
		}

		$recruitmentModel = $module->model;
		if (isset($getPara['filters'])) {
			foreach ($getPara['filters'] as $key => $val) {
				if ($val) {
					$recruitmentModel->where($key, $val);
				}
			}
		}
		if (isset($getPara['dateFrom']) && isset($getPara['dateTo']) && $getPara['dateFrom'] && $getPara['dateTo']) {
			$minvalue = $getPara['dateFrom'];
			$maxvalue = $getPara['dateTo'];
			$recruitmentModel->groupStart();
			$recruitmentModel->where("recruitment_to BETWEEN '$minvalue' AND '$maxvalue'", null, false);
			$recruitmentModel->orWhere("DATE(created_at) BETWEEN '$minvalue' AND '$maxvalue'", null, false);
			$recruitmentModel->groupEnd();
		}
		$recruitmentModel->where('status', getOptionValue($moduleName, 'status', 'approve'));
		$recruitmentModel->orWhere('status', getOptionValue($moduleName, 'status', 'closed'));
		if (isset($getPara['search']) && $getPara['search']) {
			$recruitmentModel->groupStart();
			$recruitmentModel->like('recruitment_code', $getPara['search']);
			$recruitmentModel->orLike('descriptions', $getPara['search']);
			$recruitmentModel->orLike('requirements', $getPara['search']);
			$recruitmentModel->orLike('benefits', $getPara['search']);
			$recruitmentModel->groupEnd();
		}

		$data['recordsTotal'] = $recruitmentModel->countAllResults(false);
		$list = $recruitmentModel->orderBy('created_at', 'desc')->findAll($getPara['limit'], $getPara['page'] * $getPara['limit'] - $getPara['limit']);
		foreach ($list as $key => $value) :
			$module->setModule('candidates');
			$candidateModel = $module->model;
			$listCandidates = handleDataBeforeReturn($module, $candidateModel->where('recruitment_proposal', $value->id)->findAll(), true);
			$list[$key]->candidates = $listCandidates;
		endforeach;

		$module->setModule('recruitments');
		$data['data'] = handleDataBeforeReturn($module, $list, true);
		return $this->respond($data);
	}

	public function load_candidate_get()
	{
		$moduleName = 'candidates';
		$module = \Config\Services::modules();
		$module->setModule('candidates');
		$getPara = $this->request->getGet();
		$userID = user_id();

		if (!mayList($moduleName)) {
			return $this->failForbidden(MISSING_LIST_PERMISSION);
		}

		$candidateModel = $module->model;
		if (isset($getPara['filters'])) {
			foreach ($getPara['filters'] as $key => $val) {
				if ($val) {
					$candidateModel->where($key, $val);
				}
			}
		}
		if (isset($getPara['dateFrom']) && isset($getPara['dateTo']) && $getPara['dateFrom'] && $getPara['dateTo']) {
			$minvalue = $getPara['dateFrom'];
			$maxvalue = $getPara['dateTo'];
			$candidateModel->groupStart();
			$candidateModel->where("DATE(created_at) BETWEEN '$minvalue' AND '$maxvalue'", null, false);
			$candidateModel->groupEnd();
		}
		if (isset($getPara['search']) && $getPara['search']) {
			$candidateModel->groupStart();
			$candidateModel->like('candidate_name', $getPara['search']);
			$candidateModel->orLike('candidate_email', $getPara['search']);
			$candidateModel->orLike('candidate_phone', $getPara['search']);
			$candidateModel->orLike('candidate_address', $getPara['search']);
			$candidateModel->orLike('candidate_note', $getPara['search']);
			$candidateModel->groupEnd();
		}

		$data['recordsTotal'] = $candidateModel->countAllResults(false);
		$list = $candidateModel->orderBy('created_at', 'desc')->findAll($getPara['limit'], $getPara['page'] * $getPara['limit'] - $getPara['limit']);
		// star
		$ac = array_column($list, 'id');
		$module->setModule('candidate_reviews');
		$reviewModel = $module->model;
		$reviewData = $ac ? $reviewModel->whereIn('candidate_id', $ac)->findAll() : [];
		$arrRW = [];
		foreach ($reviewData as $rw) {
			if (!isset($arrRW[$rw->candidate_id])) {
				$arrRW[$rw->candidate_id]['rating'] = 0;
				$arrRW[$rw->candidate_id]['count'] = 0;
			}
			$arrRW[$rw->candidate_id]['candidate_id'] = $rw->candidate_id;
			$arrRW[$rw->candidate_id]['rating'] += $rw->rating;
			$arrRW[$rw->candidate_id]['count'] += 1;
		}

		$module->setModule('candidates');
		$data['results'] = handleDataBeforeReturn($module, $list, true);
		$data['reviews'] = $arrRW;
		$data['page'] = $getPara['page'];
		return $this->respond($data);
	}

	/*
	* Lấy thông tin của 1 recruitment có kèm các stage và danh sách ứng viên đang có trong từng stage
	*/
	public function job_get($id)
	{
		$module = \Config\Services::modules('recruitments');
		$recruitmentModel = new RecruitmentModel();
		if (!mayAccessResource('recruitments', $id)) return $this->failForbidden(MISSING_ACCESS_PERMISSION);
		$job = $recruitmentModel->find($id);
		$job = handleDataBeforeReturn($module, $job);
		$searchText = $this->request->getGet('search') ?? '';
		$stages = $recruitmentModel->getRecruitmentWorkflow($id, $searchText, []);

		// /modules/candidates/87/other/87_1657877314_avatar.png
		$arrCandidate = [];
		foreach ($stages as $item) {
			$arrRep = [];
			foreach ($item['cards'] as $candidate) {
				if ($candidate['candidate_avatar']) {
					$candidate['candidate_avatar'] = '/modules/candidates/' . $candidate['id'] . '/other/' . $candidate['candidate_avatar'];
				}
				$candidate['stage'] = array('value' => $candidate['stage'], 'label' => $item['title']);
				$arrRep[] = $candidate;
				$arrCandidate[] = $candidate;
			}
			$item['cards'] = $arrRep;
			$job['stages'][] = $item;
		}
		$job['candidates'] = $arrCandidate;

		return $this->respond($job);
	}

	/*
	* Thay đổi status của 1 recruiment
	*/
	public function change_status_get($id, $status)
	{
		$recruitmentModel = new RecruitmentModel();
		if (!mayAccessResource('recruitments', $id)) return $this->failForbidden(MISSING_ACCESS_PERMISSION);
		try {
			$data = ['publish_status' => $status];
			$recruitmentModel->setAllowedFields(array_keys($data))->update($id, $data);
		} catch (\ReflectionException $e) {
			return $this->fail(FAILED_SAVE);
		}
		return $this->respond(ACTION_SUCCESS);
	}

	/*
	* Thay đổi stage của ứng viên,cập nhật ứng viên và vị trí trong stage
	*/
	public function change_stage_post($recruitmentId)
	{
		if (!mayAccessResource('recruitments', $recruitmentId)) return $this->failForbidden(MISSING_ACCESS_PERMISSION);
		$module = \Config\Services::modules('candidates');
		$model = $module->model;
		$postData = $this->request->getPost();
		$stageData = $postData['stageData'];
		$candidateId = $postData['candidate'] ?? 0;
		$candidateName = $postData['candidateName'] ?? 'undefined';
		$toStage = $postData['toStage'] ?? 0;
		$toStageName = $postData['toStageName'] ?? 'undefined';
		$fromStage = $postData['fromStage'] ?? 0;
		$fromStageName = $postData['fromStageName'] ?? 'undefined';
		$actionData = $postData['actionData'] ?? [];
		$candidate = $model->select(['id', 'stage', 'stage_order', 'rejection_reason', 'is_employed'])->asArray()->find($candidateId);
		$username = user()->username;
		$langPrefix = '{';
		$langSubfix = '}';
		$langStagePrefix = $langPrefix . 'modules.recruitments.kanban.stages.';

		if (empty($candidate)) {
			return $this->failNotFound(NOT_FOUND);
		}
		if (filter_var($candidate['is_employed'], FILTER_VALIDATE_BOOLEAN)) {
			return $this->failForbidden('UNABLE_CHANGE_STAGE_CANDIDATE_HAS_BEEN_ADDED_EMPLOYEE');
		}
		$updateData = [];
		if (!empty($stageData)) {
			try {
				$model->setAllowedFields(['stage', 'stage_order'])->updateBatch($stageData, 'id');
			} catch (\ReflectionException $e) {
				return $this->fail(FAILED_SAVE);
			}
		} else {
			if (!empty($toStage)) {
				$updateData['stage'] = $toStage;
			}
		}
		$activityLog = boldText($username) . $this->activityLang['movedCandidate'] . boldText($candidateName) . $this->activityLang['fromStage'] . boldText($langStagePrefix . $fromStageName . $langSubfix) . $this->activityLang['to'] . boldText($langStagePrefix . $toStageName . $langSubfix);

		if (isset($actionData['rejection_reason']) && !empty($actionData['rejection_reason'])) {
			$updateData['rejection_reason'] = $actionData['rejection_reason'];
			$activityLog .= $this->activityLang['rejectReason'] . boldText($langPrefix . $actionData['rejection_reason_name'] . $langSubfix);
		} else {
			if (!empty($candidate['rejection_reason'])) {
				$updateData['rejection_reason'] = '';
			}
		}

		if (isset($actionData['is_employed']) && !empty($actionData['is_employed'])) {
			$updateData['is_employed'] = 1;
			$activityLog .= $this->activityLang['hasBeenAddedAsEmployee'];
		}

		if (!empty($updateData)) $model->setAllowedFields(array_keys($updateData))->update($candidateId, $updateData);
		if (isset($actionData['interview_schedule']) && filter_var($actionData['interview_schedule'], FILTER_VALIDATE_BOOLEAN)) {
			$module->setModule('interviews');
			$interviewModel = $module->model;
			$data = [
				'candidate_name' => $actionData['candidate'],
				'interview_date' => formatDate($actionData['interview_date'], 'datetime'),
				'interview_note' => '',
				'interviewer' => $actionData['interviewer'],
			];
			$interviewModel->setAllowedFields(array_keys($data))->insert($data);
			$activityLog .= $this->activityLang['andSetAnInterviewScheduleAt'] . boldText(formatDate($actionData['interview_date'], 'd/m/Y H:i')) . $this->activityLang['by'] . boldText($actionData['interviewerName']);
		}
		if (isset($actionData['send_mail']) && filter_var($actionData['send_mail'], FILTER_VALIDATE_BOOLEAN)) {
			$mailServices = \Config\Services::mail();
			$mailServices->send($actionData['subject'], $actionData['mailTo'], $actionData['mailContent']);
			$activityLog .= $this->activityLang['sendAnEmailToCandidate'];
		}

		$recruitmentModel = new RecruitmentModel();
		if (!empty($activityLog)) $recruitmentModel->addActivity($recruitmentId, $activityLog);

		return $this->respond(ACTION_SUCCESS);
	}

	/*
	* kiểm tra lịch hẹn phỏng vấn của 1 ứng viên xem trong tương lai ứng viên có lịch hẹn nào không
	 * api sử dụng cho chức năng trước khi thay đổi stage của 1 ứng viên đã có lịch hẹn,cần xác nhận xem người dùng
	 * muốn xoá lịch đã hẹn nếu chưa tới ngày hẹn hay không ?.
	*/
	public function check_candidate_interview_schedule_get($recruitmentId, $candidateId)
	{
		if (!mayAccessResource('recruitments', $recruitmentId)) return $this->failForbidden(MISSING_ACCESS_PERMISSION);
		$module = \Config\Services::modules('interviews');
		$model = $module->model;
		$data = $model->select(['id', 'interviewer', 'interview_date'])->where([
			'candidate_name' => $candidateId,
			'interview_date >=' => date('Y-m-d H:i:s')
		])->orderBy('interview_date', 'ASC')->first();

		$data = empty($data) ? false : handleDataBeforeReturn($module, $data);
		return $this->respond($data);
	}

	/*
	 * trả về danh sách hoạt động của 1 job
	 * */
	public function activity_get($recruitmentId)
	{
		if (!mayAccessResource('recruitments', $recruitmentId)) return $this->failForbidden(MISSING_ACCESS_PERMISSION);
		$model = new RecruitmentModel();
		$page = $this->request->getGet('page') ?? 1;
		return $this->respond($model->getActivity($recruitmentId, $page));
	}

	/*
	* Lấy thông tin của một yêu cầu tuyển dụng , thông tin cơ bản , trạng thái duyệt của người kiểm duyệt
	*/
	public function info_get($id)
	{
		$module = \Config\Services::modules('recruitments');
		$recruitmentModel = $module->model;
		if (!mayAccessResource('recruitments', $id)) return $this->failForbidden(MISSING_ACCESS_PERMISSION);
		$info = $recruitmentModel->find($id);
		$info = handleDataBeforeReturn($module, $info);
		//$info->json_approve = json_decode($info->json_approve, true);
		$info->approved = "0";
		$info->userapproved = "0";
		$approve = json_decode($info->json_approve, true);
		$userApprove = $info->send_to;

		foreach ($userApprove as $key => $val) {
			$keyApprove = array_search($val['value'], array_column($approve, 'id'));
			$userApprove[$key]['status'] = trim($approve[$keyApprove]['status']);
			if ($val['value'] == user_id()) {
				$info->userapproved = trim($approve[$keyApprove]['status']);
			}
			if (trim($approve[$keyApprove]['status']) !== "0") {
				$info->approved = 1;
			}
		}
		$info->send_to = $userApprove;
		return $this->respond($info);
	}

	/*
	* Thêm mới yêu cầu tuyển dụng
	*/
	public function add_post()
	{
		helper('app_select_option');
		$validation = \Config\Services::validation();
		$modules = \Config\Services::modules('recruitments');
		if (!mayAdd('recruitments')) {
			return $this->failForbidden(MISSING_ADD_PERMISSION);
		}
		$recruitmentModel = new RecruitmentModel();
		$postData = $this->request->getPost('data');
		$filesData = $this->request->getFiles();

		// close JOB
		if (isset($postData['status']) && isset($postData['id'])) {
			if ($postData['status'] == getOptionValue('recruitments', 'status', 'closed')) {
				$activityLog = boldText(user()->username) . $this->activityLang['closedJob'] . boldText($postData['recruitment_code']);
				$recruitmentModel->setAllowedFields(['id', 'status', 'recruitment_code']);
				$recruitmentModel->save($postData);
				$recruitmentModel->addActivity($postData['id'], $activityLog);
				return $this->respond(ACTION_SUCCESS);
			}
		}

		$dataApprove = [];
		foreach ($postData['send_to'] as $val) {
			$dataApprove[] = [
				'id' => $val,
				'status' => 0
			];
		}

		$send_to = json_encode($dataApprove);
		if (!isset($postData['id'])) {
			$postData['json_approve'] = $send_to;
		}
		$postData['slug'] = create_slug($postData['recruitment_code']);
		$postData['status'] = getOptionValue('recruitments', 'status', 'pending');

		if (isset($postData['id'])) {
			$info = $recruitmentModel->find($postData['id']);
			$postData['status'] = $info['status'];
		}

		$dataHandleRecruitment = handleDataBeforeSave($modules, $postData);
		$recruitmentModel->setAllowedFields($dataHandleRecruitment['fieldsArray']);
		if (!empty($dataHandleRecruitment['validate'])) {
			if (!$validation->reset()->setRules($dataHandleRecruitment['validate'])->run($dataHandleRecruitment['data'])) {
				return $this->failValidationErrors($validation->getErrors());
			}
		}

		$recruitmentModel->save($dataHandleRecruitment['data']);
		$idRecruit = $recruitmentModel->getInsertID();
		if (isset($postData['hiringwork']) && $postData['hiringwork'] == 0) {
			$modules->setModule('hiring_workflow');
			$hiring_workflowModel = $modules->model;
			$dataHiring = $hiring_workflowModel->findAll();
			$modules->setModule('recruitments_workflow');
			$recruitments_workflow = $modules->model;
			$dataHandleWorkflow = handleDataBeforeSave($modules, []);
			$recruitments_workflow->setAllowedFields($dataHandleWorkflow['fieldsArray']);
			foreach ($dataHiring as $dataHiring1) :
				$value = [
					"recruitment" => $idRecruit,
					"stage" => $dataHiring1->stage,
					"default_state_id" => $dataHiring1->id,
					"order" => $dataHiring1->order,
					"locked" => $dataHiring1->locked,
				];
				$recruitments_workflow->save($value);
			endforeach;
		}
		$activityLog = boldText(user()->username) . $this->activityLang['jobCreated'] . boldText($postData['recruitment_code']);
		$recruitmentModel->addActivity($idRecruit, $activityLog);
		$sendToMail = handleDataBeforeReturn('recruitments', $dataHandleRecruitment['data'])['send_to'];
		if ($postData['status'] != getOptionValue('recruitments', 'status', 'approve')) {
			$this->sendMailManage($sendToMail, $postData['recruitment_code']);
		}
		return $this->respond(ACTION_SUCCESS);
	}

	/*
	* Thêm mới học viên
	*/
	public function add_candidate_post()
	{
		$modules = \Config\Services::modules();
		if (!mayAdd('candidates')) {
			return $this->failForbidden(MISSING_ADD_PERMISSION);
		}
		$postData = $this->request->getPost('data');
		$filesData = $this->request->getFiles();
		$result = $this->_handleInsertCandidate($modules, $postData, $filesData);

		if ($result) {
			return $this->failValidationErrors($result);
		} else {
			return $this->respond(ACTION_SUCCESS);
		}
	}

	public function candidate_info_get($id)
	{

		helper('app_select_option');
		$module = \Config\Services::modules();
		$module->setModule('candidates');
		$candidateModel = $module->model;
		if (!mayAccessResource('candidates', $id)) return $this->failForbidden(MISSING_ACCESS_PERMISSION);
		$info = $candidateModel->find($id);
		$info = handleDataBeforeReturn($module, $info);

		$disc = !$info->disc ? [] : json_decode($info->disc, true);
		$info->disc = array_slice($disc, 0, 2);

		$vakad = !$info->vakad ? [] : json_decode($info->vakad, true);
		$info->vakad = array_slice($vakad, 0, 2);

		$recruitmentModel = new RecruitmentModel();
		$stages = $info->recruitment_proposal ? $recruitmentModel->getRecruitmentWorkflow($info->recruitment_proposal['value'], '', [], false) : [];
		$infoJob = $recruitmentModel->find($info->recruitment_proposal['value']);

		$info->listStage = $stages;
		$info->closed_job = $infoJob['status'] === getOptionValue('recruitments', 'status', 'closed') ? true : false;

		return $this->respond($info);
	}

	/*
	 * API kiểm duyệt , cập nhật trạng thái request
	 * */
	public function approve_post($recruitmentId)
	{

		helper('app_select_option');
		$moduleName = 'recruitments';
		$module = \Config\Services::modules('recruitments');
		$status = $this->request->getPost('data')['status'];
		$recruitmentModel = $module->model;
		$recruitmentModel->setAllowedFields(['json_approve', 'status']);
		$info = $recruitmentModel->asArray()->find($recruitmentId);
		$listApprove = json_decode($info['json_approve'], true);
		$perApprove = 0;
		foreach ($listApprove as $key => $val) {
			if ($val['id'] == user_id()) {
				$perApprove = 1;
				$listApprove[$key]['status'] = $status;
			}
		}

		$checkApprove = array_count_values(array_column($listApprove, 'status'));

		if (isset($checkApprove[getOptionValue($moduleName, 'status', 'approve')]) && $checkApprove[getOptionValue($moduleName, 'status', 'approve')] === count($listApprove)) {
			$dataSave['status'] = getOptionValue($moduleName, 'status', 'approve');
		} elseif (isset($checkApprove[getOptionValue($moduleName, 'status', 'decline')]) && $checkApprove[getOptionValue($moduleName, 'status', 'decline')] === count($listApprove)) {
			$dataSave['status'] = getOptionValue($moduleName, 'status', 'decline');
		} else {
			$dataSave['status'] = getOptionValue($moduleName, 'status', 'pending');
		}
		if (!$perApprove) return $this->failForbidden(MISSING_ACCESS_PERMISSION);
		$dataSave['json_approve'] = json_encode($listApprove);
		$dataSave['id'] = $recruitmentId;
		$activeLog = '';

		$recruitmentModel->save($dataSave);

		// SEND MAIL
		$dataHandle = handleDataBeforeReturn($module, $info);
		foreach ($dataHandle['send_to'] as $key => $aaa) {
			$keySearch = array_search($aaa['value'], array_column($listApprove, 'id'));
			$stt = 'Pending';
			if ($listApprove[$keySearch]['status'] == getOptionValue($moduleName, 'status', 'approve')) $stt = 'Approve';
			if ($listApprove[$keySearch]['status'] == getOptionValue($moduleName, 'status', 'decline')) $stt = 'Decline';

			$dataHandle['send_to'][$key]['status'] = $stt;
			if ($aaa['value'] == user_id()) $dataHandle['send_to'][$key]['isHandle'] = true;
		}
		$module->setModule('users');
		$userModel = $module->model;
		$infoUser = $userModel->asArray()->find($info['owner']);
		$sendMail = $this->sendMailApprove($dataHandle['send_to'], ['full_name' => $infoUser['full_name'], 'email' => $infoUser['email']], $info['recruitment_code']);
	}

	public function load_cv_post()
	{
		$parser = new \Smalot\PdfParser\Parser();
		$cv = $this->request->getFile('data');
		$pdf = $parser->parseFile($cv);
		$textContent = $pdf->getText();

		$justNums = preg_replace("/[^0-9]/", '', $textContent);
		//$phoneNumber = preg_replace("^(0[1-9]|1[012])[-/.](0[1-9]|[12][0-9]|3[01])[-/.](19|20)\\d\\d$", '', $textContent);
		$pattern = '/[a-z0-9_\-\+\.]+@[a-z0-9\-]+\.([a-z]{2,4})(?:\.[a-z]{2})?/i';
		preg_match_all($pattern, $textContent, $email);

		$patternBDay = '/\([0-9]{2}\.[0-9]{2}\.([0-9]{2})|([0-9]{4})\)/';
		preg_match_all($patternBDay, $textContent, $bd);

		$patternPhone = '/(84|0[3|5|7|8|9])+([0-9]{8})\b/';
		preg_match_all($patternPhone, $textContent, $phone);

		$patternName = '/^[a-zA-aAàÀảẢãÃáÁạẠăĂằẰẳẲẵẴắẮặẶâÂầẦẩẨẫẪấẤậẬbBcCdDđĐeEèÈẻẺẽẼéÉẹẸêÊềỀểỂễỄếẾệỆfFgGhHiIìÌỉỈĩĨíÍịỊjJkKlLmMnNoOòÒỏỎõÕóÓọỌôÔồỒổỔỗỖốỐộỘơƠờỜởỞỡỠớỚợỢpPqQrRsStTuUùÙủỦũŨúÚụỤưƯừỪửỬữỮứỨựỰvVwWxXyYỳỲỷỶỹỸýÝỵỴzZ\s\W|_]+$/';
		preg_match_all($patternName, $textContent, $name);

		$data['phone'] = (count($phone[0]) > 0) ? $phone[0][0] : '';
		$data['email'] = (count($email[0]) > 0) ? $email[0][0] : '';
		return $this->respond($data);
	}

	public function load_content_cv_post()
	{
		$modules = \Config\Services::modules();
		$parser = new \Smalot\PdfParser\Parser();

		$postData = $this->request->getPost();
		$listCvUpload = isset($postData['list_cv_upload']) ? $postData['list_cv_upload'] : [];
		$fileIndex = 0;
		if (count($listCvUpload) > 0) {
			$arrKey = array_column($listCvUpload, 'key');
			$fileIndex = max($arrKey) + 1;
		}

		$files = $this->request->getFiles();
		$listFile = $files['list_file'];

		// get proposal info
		$recruitmentProposal = [];
		if (!empty($postData['recruitment_proposal'])) {
			$modules->setModule("recruitments");
			$model = $modules->model;
			$infoRecruitment = $model->asArray()->select(['id', 'recruitment_code'])->find($postData['recruitment_proposal']);
			$recruitmentProposal = [
				'value' => $infoRecruitment['id'],
				'label' => $infoRecruitment['recruitment_code']
			];
		}

		$result = [];
		foreach ($listFile as $keyFile => $rowFile) {
			foreach ($rowFile as $position => $file) {
				$fileObj = $file;
				$fileName = $fileObj->getName();
				$fileExtension = $fileObj->getMimeType();
				if ($fileExtension == 'application/pdf') {
					$type = 'pdf';
					$pdf = $parser->parseFile($fileObj);
					$base64Content = base64_encode(file_get_contents($fileObj));
					$filePath = '';
					$textContent = $pdf->getText();
				} else {
					$type = 'doc';
					$uploadFile = $this->_uploadDocFile($fileObj, $fileName);
					$filePath = $uploadFile['url'];
					$path = $uploadFile['path'];
					$docObj = new DocxConversion($path);
					$base64Content = '';
					$textContent = $docObj->convertToText();
				}

				// get first name, last name, phone, email from file
				[$firstName, $lastName, $phone, $email] = $this->_getInfoFromFile($textContent);
				$name = $firstName . ' ' . $lastName;
				$result['cv_' . $fileIndex] = [
					'key' => $fileIndex,
					'type' => $type,
					'extension' => $fileExtension,
					'file_name' => $fileName,
					'name' => $name,
					'phone' => $phone,
					'email' => $email,
					'cover_letter' => '',
					'img' => '',
					'source' => [],
					'base64_content' => $base64Content,
					'file_path' => $filePath,
					'recruitment_proposal' => (object)$recruitmentProposal,
					'email_in_job' => $this->_getListEmployeeEmail($modules, $recruitmentProposal['value'])
				];
			}
			$fileIndex++;
		}
		return $this->respond([
			'list_cv_content' => $result
		]);
	}

	public function load_employee_email_get()
	{
		$modules = \Config\Services::modules();
		$idJob = $this->request->getGet('idJob');

		foreach ($idJob as $id) {
			$listEmail[$id] = $this->_getListEmployeeEmail($modules, $id);
		}
		return $this->respond($listEmail);
	}

	public function delete_list_file_cv_post()
	{
		$postData = $this->request->getPost();
		$listFile = reset($postData);
		$storePath = WRITEPATH . 'uploads/default/candidate/';
		foreach ($listFile as $file) {
			unlink($storePath . $file['file_name']);
		}

		return $this->respond();
	}

	public function import_cv_post()
	{
		$modules = \Config\Services::modules();
		if (!mayAdd('candidates')) {
			return $this->failForbidden(MISSING_ADD_PERMISSION);
		}

		$postData = $this->request->getPost();
		$filesData = $this->request->getFiles();


		$listDV = $postData['list_cv_upload'];
		$arrInvalid = [];

		$i = 0;
		foreach ($listDV as $keyCV => $rowCV) {
			$cvData = [
				'candidate_name' => $rowCV['name'],
				'candidate_email' => $rowCV['email'],
				'candidate_address' => '',
				'candidate_phone' => $rowCV['phone'],
				'candidate_dob' => '',
				'gender' => '',
				'candidate_avatar' => '',
				'source' => $rowCV['source'],
				'candidate_note' => $rowCV['cover_letter'],
				'recruitment_proposal' => $rowCV['recruitment_proposal']
			];

			//$listCV = $filesData['list_file_cv'][$rowCV['key']];
			$listCV = $filesData['list_file_cv'][$i];
			$newListCV = [];
			foreach ($listCV as $row) {
				$newListCV['cv'] = $row;
			}
			$filesDataCV = [
				'data' => $newListCV
			];
			$result = $this->_handleInsertCandidate($modules, $cvData, $filesDataCV);
			if ($result) {
				$arrInvalid[] = [
					'key' => $keyCV,
					'errors' => $result
				];
			}
			$i++;
		}
		if (count($arrInvalid) > 0) {
			return $this->failValidationErrors($arrInvalid);
		} else {
			return $this->respond(ACTION_SUCCESS);
		}
	}

	public function delete_old_cv_post()
	{
		$storePath = WRITEPATH . 'uploads/default/candidate/';
		$folderPath = '/default/candidate/';
		$currentTime = strtotime(date('Y-m-d H:i:s'));
		if (is_dir($storePath)) {
			foreach (scandir($storePath) as $item) {
				if ($item == '.' || $item == '..') {
					continue;
				}
				if (is_file($storePath . $item)) {
					$file = getFilesProps($folderPath . '' . $item);
					if (count($file) == 0) {
						continue;
					}

					$fileMT = $file['fileMT'];
					$timeBetween = $currentTime - $fileMT;
					if ($timeBetween / 3600 >= 6) {

						unlink($storePath . $item);
					}
				}
			}
		}

		return $this->respond(ACTION_SUCCESS);
	}

	public function checkExistJob()
	{
		$modules = \Config\Services::modules();
		$post = $this->request->getPost();
		$id = isset($post['id']) ? $post['id'] : false;
		$job = isset($post['job']) ? $post['job'] : false;
		$email = isset($post['email']) ? $post['email'] : false;
		$modules->setModule('candidates');
		$candidateModel = $modules->model;
		if ($id) {
			$info = $candidateModel->asArray()->where('id', $id)->first();
			$email = $info['candidate_email'];
		}

		$checkExist = $candidateModel->where('candidate_email', $email)->where('recruitment_proposal', $job)->find();
		if ($checkExist) {
			return $this->fail('EXIST');
		}
		return $this->respond(ACTION_SUCCESS);
	}

	public function tags_sources_get()
	{
		$modules = \Config\Services::modules();
		$recruitmentModel = new RecruitmentModel();
		$modules->setModule('tags');
		$tagModel = $modules->model;
		$tags = $tagModel->asArray()->findAll();
		$arrTag = [];
		foreach ($tags as $tag) {

			$arrTag[] = [
				'id' => $tag['id'],
				'title' => $tag['name'],
				'total' => $recruitmentModel->getCandidateByTag($tag['id']),
			];
		}

		$modules->setModule('sources');
		$sourceModel = $modules->model;
		$sources = $sourceModel->asArray()->findAll();
		$arrSource = [];
		foreach ($sources as $source) {
			$arrSource[] = [
				'id' => $source['id'],
				'title' => $source['name'],
				'total' => $recruitmentModel->getCandidateBySource($source['id']),
			];
		}
		$data['tags'] = $arrTag;
		$data['sources'] = $arrSource;
		return $this->respond($data);
	}

	public function load_email_template_get()
	{
		$model = new AppModel();
		$model->setTable('email_templates');
		$data = $model->findAll();
		return $this->respond($data);
	}

	public function email_template()
	{

		$model = new AppModel();
		$model->setTable('email_templates')->setAllowedFields(['name', 'subject', 'category', 'content', 'source', 'created_by'])->withoutTrigger();
		$post = $this->request->getPost();
		if (isset($post['delete'])) {
			$model->delete($post['delete']);
			return $this->respond(ACTION_SUCCESS);
		}
		$data = [
			'name' => $post['name'],
			'source' => 'recruitment',
			'category' => $post['category'],
			'subject' => $post['subject'],
			'content' => $post['content'],
			'created_by' => user_id()
		];
		if (isset($post['id'])) {
			$data['id'] = $post['id'];
		}
		$model->save($data);
		return $this->respond(ACTION_SUCCESS);
	}

	public function save_general_post()
	{
		$getPost = $this->request->getPost();

		if (isset($getPost['data']['recruitment_email'])) {
			preference('recruitment_email', $getPost['data']['recruitment_email'], true);
		}
		return $this->respond(ACTION_SUCCESS);
	}


	public function export_candidates_get()
	{
		$getPara = $this->request->getGet();
		$moduleName = 'candidates';
		$module = \Config\Services::modules();
		$module->setModule('candidates');
		$model = $module->model;
		if (isset($getPara['filters'])) {
			foreach ($getPara['filters'] as $key => $val) {
				if ($val) {
					$model->where($key, $val);
				}
			}
		}

		$arr_alphabet = [];
		foreach (range('A', 'N') as $columnId) {
			$arr_alphabet[] = $columnId;
		}

		$spreadsheet = new Spreadsheet();
		$sheet = $spreadsheet->getActiveSheet();
		$styleArray = [
			'font' => [
				'bold' => true
			]
		];

		$i = 1;
		$sheet->getStyle("A$i:N$i")->applyFromArray($styleArray);
		$sheet->setCellValue("A$i", "Name");
		$sheet->setCellValue("B$i", "Phone");
		$sheet->setCellValue("C$i", "Email");
		$sheet->setCellValue("D$i", "Address");
		$sheet->setCellValue("E$i", "DOB");
		$sheet->setCellValue("F$i", "Note");
		$sheet->setCellValue("G$i", "Gender");
		$sheet->setCellValue("H$i", "Source");
		$sheet->setCellValue("I$i", "Tags");
		$sheet->setCellValue("J$i", "Skills");
		$sheet->setCellValue("K$i", "Job");
		$sheet->setCellValue("L$i", "Stage");
		$sheet->setCellValue("M$i", "DISC");
		$sheet->setCellValue("N$i", "VAKAD");
		$data = $model->asArray()->findAll();
		$dataBeforeReturn = handleDataBeforeReturn($module, $data, true);

		// the file is corrupt and cannot be opened

		foreach ($dataBeforeReturn as $item) {
			$i++;
			$sheet->getStyle("A$i:N$i")->getNumberFormat()->setFormatCode(\PhpOffice\PhpSpreadsheet\Style\NumberFormat::FORMAT_TEXT);
			$sheet->setCellValue("A$i", $item['candidate_name'] ?? "-");
			$sheet->setCellValue("B$i", $item['candidate_phone'] ?? "-");
			$sheet->setCellValue("C$i", $item['candidate_email'] ?? "-");
			$sheet->setCellValue("D$i", $item['candidate_address'] ?? "-");
			$sheet->setCellValue("E$i", $item['candidate_dob'] ?? "-");
			$sheet->setCellValue("F$i", $item['candidate_note'] ?? "-");
			$sheet->setCellValue("G$i", $item['gender']['label'] ?? "-");
			$sheet->setCellValue("H$i", $item['source']['label'] ?? "-");
			$sheet->setCellValue("I$i", $item['tags']['label'] ?? "-");
			$sheet->setCellValue("J$i", $item['skills']['label'] ?? "-");
			$sheet->setCellValue("K$i", $item['recruitment_proposal']['label'] ?? "-");
			$sheet->setCellValue("L$i", $item['stage']['label'] ?? "-");
			$sheet->setCellValue("M$i", $item['disc'] ?? "-");
			$sheet->setCellValue("N$i", $item['vakad'] ?? "-");
		}

		foreach ($arr_alphabet as $columnId) {
			$sheet->getColumnDimension($columnId)->setAutoSize(true);
		}
		/*export excel*/
		$writer = new Xlsx($spreadsheet);
		header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		$writer->save('php://output');

		exit;
	}

	// ** support function
	private function _uploadDocFile($file, $fileName)
	{
		$storePath = WRITEPATH . 'uploads\default\candidate';
		if (!is_dir($storePath)) {
			mkdir($storePath, 0777);
		}
		$fileName = safeFileName($fileName);
		$file->move($storePath, $fileName);
		return [
			'url' => getenv('app.baseURL') . '/download/public/file?name=/default/candidate/' . $fileName,
			'path' => $storePath . '/' . $fileName
		];
	}

	private function _getInfoFromFile($textContent)
	{
		$patternPhone = '/(84|0[3|5|7|8|9])+([0-9]{8})\b/';
		$patternEmail = '/[a-z0-9_\-\+\.]+@[a-z0-9\-]+\.([a-z]{2,4})(?:\.[a-z]{2})?/i';
		preg_match_all($patternPhone, $textContent, $phone);
		$phone = (count($phone[0]) > 0) ? $phone[0][0] : '';
		preg_match_all($patternEmail, $textContent, $email);
		$email = (count($email[0]) > 0) ? $email[0][0] : '';
		$fullName = preg_split('/[\s,]+/', $textContent, 3);
		$firstName = $fullName[0];
		$lastName = $fullName[1];

		return [
			$firstName,
			$lastName,
			$phone,
			$email
		];
	}

	private function _handleInsertCandidate($modules, $postData, $filesData)
	{
		$uploadService = \App\Libraries\Upload\Config\Services::upload();
		$validation = \Config\Services::validation();
		$modules->setModule('candidates');
		$candidateModel = $modules->model;
		$idCopy = 0;
		if (isset($postData['recruitment_proposal'])) {
			$modules->setModule('recruitments_workflow');
			$modelWorkflow = $modules->model;
			$idStageApplied = $modelWorkflow->where('stage', 'applied')->where('recruitment', $postData['recruitment_proposal'])->first();
			if ($idStageApplied) {
				$postData['stage'] = $idStageApplied->id;
			}
			$modules->setModule('candidates');
		}


		if (isset($postData['isCoppy']) && $postData['isCoppy']) {
			$infoCopy = $candidateModel->asArray()->find($postData['id']);
			$idCopy = $postData['id'];
			unset($postData['id']);
			unset($postData['isCoppy']);
			unset($infoCopy['id']);
			$postData = array_merge($infoCopy, $postData);
		}

		if (isset($filesData) && $filesData) $filesData = $filesData['data'];
		$fields = array_merge(array_keys($postData), array_keys($filesData));
		$dataHandleCandidate = handleDataBeforeSave($modules, $postData, $filesData, $fields);


		$candidateModel->setAllowedFields($dataHandleCandidate['fieldsArray']);
		if (!empty($dataHandleCandidate['validate'])) {
			if (!$validation->reset()->setRules($dataHandleCandidate['validate'])->run($dataHandleCandidate['data'])) {
				//return $this->failValidationErrors($validation->getErrors());
				return $validation->getErrors();
			}
		}
		$saveData = $dataHandleCandidate['data'];
		$uploadFieldsArray = $dataHandleCandidate['uploadFieldsArray'];

		$candidateModel->save($saveData);
		$id = isset($saveData['id']) ? $saveData['id'] : $candidateModel->getInsertID();
		if (!isset($saveData['id'])) $saveData['id'] = $id;
		$avatar = '';
		if (isset($postData['candidate_avatar'])) $avatar = $postData['candidate_avatar'];

		if ($idCopy && $postData['candidate_avatar']) {
			/***if (!is_dir(WRITEPATH . 'uploads/modules/candidates/' . $id)) {
				mkdir(WRITEPATH . 'uploads/modules/candidates/' . $id . '/other', 777, true);
			}
			$avatar = WRITEPATH . 'uploads/modules/candidates/' . $idCopy . '/other/' . $postData['candidate_avatar'];
			$avatarCopy = WRITEPATH . 'uploads/modules/candidates/' . $id . '/other/' . $postData['candidate_avatar'];
			copy($avatar, $avatarCopy);***/
			$uploadService->copyFile('/modules/candidates/' . $idCopy . '/other/', '/modules/candidates/' . $id . '/other/', $postData['candidate_avatar']);
		}

		if ($idCopy && $postData['cv']) {
			/***if (!is_dir(WRITEPATH . 'uploads/modules/candidates/' . $id)) {
				mkdir(WRITEPATH . 'uploads/modules/candidates/' . $id . '/other', 777, true);
			}
			$cv = WRITEPATH . 'uploads/modules/candidates/' . $idCopy . '/other/' . $postData['cv'];
			$cvCopy = WRITEPATH . 'uploads/modules/candidates/' . $id . '/other/' . $postData['cv'];
			copy($cv, $cvCopy);***/
			$uploadService->copyFile('/modules/candidates/' . $idCopy . '/other/', '/modules/candidates/' . $id . '/other/', $postData['cv']);
		}
		if ($avatar && !$idCopy) {
			if (preg_match('/^data:image\/(\w+);base64,/', $avatar, $type)) {
				$data = substr($avatar, strpos($avatar, ',') + 1);
				$mime_type = getimagesize($avatar);
				$type = strtolower($type[1]); // jpg, png, gif
				if (!in_array($type, ['jpg', 'jpeg', 'png'])) {
					//throw new Exception(FILE_NOT_ALLOWED);
					return [
						'file_not_allowed' => true
					];
				}
				$data = str_replace(' ', '+', $data);
				$data = base64_decode($data);
				if (!$data) {
					return [
						'file_corrupted' => true
					];
					//throw new Exception(FILE_CORRUPTED);
				}
				/***if (!is_dir(WRITEPATH . 'uploads/modules/candidates/' . $id)) {
					mkdir(WRITEPATH . 'uploads/modules/candidates/' . $id, 777);
					mkdir(WRITEPATH . 'uploads/modules/candidates/' . $id . '/other', 777);
				}
				$fname = WRITEPATH . 'uploads/modules/candidates/' . $id . '/other/' . $id . '_' . time() . "_avatar.{$type}";
				***/
				$savePath = $id . '_' . time() . "_avatar.{$type}";
				//$candidateModel->setAllowedFields(['candidate_avatar'])->set('candidate_avatar', $savePath)->where('id', $id)->update();
				$saveData['candidate_avatar'] = $savePath;
				$candidateModel->save($saveData);
				$storePath = 'modules/candidates/' . $id . '/other/';
				$uploadService->uploadFile($storePath, [[
					'filename' => $savePath,
					'content' => $data,
					'filesize' => 0
				]], true);
				/***file_put_contents($fname, $data)***/;
			} else {
				return [
					'file_corrupted' => true
				];
				//throw new Exception(FILE_CORRUPTED);
			}
		}
		if ($filesData && !$idCopy) {
			foreach ($filesData as $key => $files) {
				if (empty($files)) continue;
				if (!is_array($files)) $files = [$files];
				foreach ($files as $position => $file) {
					//if (empty($uploadFieldsArray[$key])) $file = $file['data'];
					if (!$file->isValid()) {
						return $this->failValidationErrors($file->getErrorString() . '(' . $file->getError() . ')');
					}
					if (!$file->hasMoved()) {
						$subPath = (!empty($uploadFieldsArray[$key])) ? 'other' : 'data';
						$storePath = getModuleUploadPath('candidates', $id, false) . $subPath . '/';
						if ($key === 'filesDataWillUpdate') {
							$fileName = $saveData[$key][$position]['name'];
							$removeOldFilePath = $storePath . $fileName;
							$removeOldFilePathForDownload = $storePath . $fileName;
							/***if (is_file($removeOldFilePath)) {
								unlink($removeOldFilePath);
							}***/
							$uploadService->removeFile($removeOldFilePathForDownload);
							$fileName = safeFileName($fileName);
							/***$file->move($storePath, $fileName);***/
							$uploadService->uploadFile($storePath, [$file], false, $fileName);
						} else {
							$fileName = safeFileName($file->getName());
							/***$file->move($storePath, $fileName);***/
							$uploadService->uploadFile($storePath, [$file], false, $fileName);
							if (!empty($uploadFieldsArray[$key])) {
								if ($uploadFieldsArray[$key]->field_type == 'upload_multiple') {
									$arrayFiles = isset($saveData[$key]) ? json_decode($saveData[$key], true) : [];
									$arrayFiles[] = $fileName;
									$saveData[$key] = json_encode($arrayFiles);
								} else {
									$saveData[$key] = $fileName;
								}
							}
						} //end check file update
					}
				}
			}

			try {
				$candidateModel->save($saveData);
			} catch (\ReflectionException $e) {
				return $this->fail(FAILED_SAVE . '_' . $e->getMessage());
			}
		}
	}

	private function _getListEmployeeEmail($modules, $idJob)
	{
		$modules->setModule('candidates');
		$model = $modules->model;
		$listEmail = $model->asArray()->select(['candidate_email'])->where('recruitment_proposal', $idJob)->findAll();
		$listEmail = array_column($listEmail, 'candidate_email');

		return $listEmail;
	}

	private function sendMailManage($arrSend, $nameRequest)
	{

		$mailServices = \Config\Services::mail();
		$subject = 'Request for Recruitment Proposal';
		$cc = preference('recruitment_email');

		foreach ($arrSend as $val) :
			$full_name = $val['full_name'];
			$mail_to = $val['email'];
			$urlApprove = $_ENV["app.siteURL"] . '/recruitments/approval';
			$mailContent = "
<table width='100%' cellpadding='0' cellspacing='0' border='0' style='width:100%;' align='center' bgcolor='#F2F2F3'>
	<tr>
		<td>
		<table width='100%' cellpadding='0' cellspacing='0' border='0' style='width:100%;max-width:700px;font: small/1.5 Arial,Helvetica,sans-serif;' align='center' bgcolor='#ffffff'>
			<tr>
				<td style='padding: 35px; font-size: 18px'>
				<span>Hi $full_name,</span>
				<br>
				<br>
				<span>You have 01 recruitment request to process ($nameRequest). </span><br>
				<span>Please review and process the request <a target='_blank' href='$urlApprove' style='color: #01CD89; text-decoration: none;'>here</a>.</span>
				<br>
				<span>Thanks!</span>
				<br>
				<br>
				<span>Best regards,</span>
				<br>
				<span>Friday team</span>
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
		";

			if (!empty($mail_to)) {
				$mailServices->send($subject, $mail_to, $mailContent, $cc);
			}
		endforeach;
	}

	private function sendMailApprove($sendTo, $mailTo, $nameRequest)
	{
		$mailServices = \Config\Services::mail();
		$subject = 'Feedback on recruitment request [' . $nameRequest . ']';
		$full_nameTo = $mailTo['full_name'];
		$urlApprove = $_ENV["app.siteURL"] . '/recruitments/request';
		$resultApprove = '';
		$cc = preference('recruitment_email');

		foreach ($sendTo as $val) :
			$full_name = $val['full_name'];
			$status = $val['status'];
			if (isset($val['isHandle'])) {
				$resultApprove .= "<li><u>$full_name : $status</u></li>";
			} else {
				$resultApprove .= "<li>$full_name : $status</li>";
			}
		endforeach;

		$mailContent = "
<table width='100%' cellpadding='0' cellspacing='0' border='0' style='width:100%;' align='center' bgcolor='#F2F2F3'>
	<tr>
		<td>
		<table width='100%' cellpadding='0' cellspacing='0' border='0' style='width:100%;max-width:700px;font: small/1.5 Arial,Helvetica,sans-serif;' align='center' bgcolor='#ffffff'>
			<tr>
				<td style='padding: 35px; font-size: 18px'>
				<span>Hi $full_nameTo,</span>
				<br>
				<br>
				<span>Do you have feedback on the recruitment request ($nameRequest) : </span>
				<br>
				<br>
				<span>$resultApprove</span>
				<br>
				<span>Please follow the process <a target='_blank' href='$urlApprove' style='color: #01CD89; text-decoration: none;'>here</a>.</span>
				<br>
				<span>Thanks!</span>
				<br>
				<br>
				<span>Best regards,</span>
				<br>
				<span>Friday team</span>
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
		";

		if (!empty($mailTo['email'])) {
			$mailServices->send($subject, $mailTo['email'], $mailContent, $cc);
		}
	}
}
