#!/usr/bin/env php
<?php

/*
 * --------------------------------------------------------------------
 * CodeIgniter command-line tools
 * --------------------------------------------------------------------
 * The main entry point into the CLI system and allows you to run
 * commands and perform maintenance on your application.
 *
 * Because CodeIgniter can handle CLI requests as just another web request
 * this class mainly acts as a passthru to the framework itself.
 */

define('SPARKED', true);

/*
 *---------------------------------------------------------------
 * BOOTSTRAP THE APPLICATION
 *---------------------------------------------------------------
 * This process sets up the path constants, loads and registers
 * our autoloader, along with Composer's, loads our constants
 * and fires up an environment-specific bootstrapping.
 */

// Refuse to run when called from php-cgi
if (substr(php_sapi_name(), 0, 3) === 'cgi') {
	die("The cli tool is not supported when running php-cgi. It needs php-cli to function!\n\n");
}

// Path to the front controller
const DS = DIRECTORY_SEPARATOR;
const FCPATH = __DIR__ . '/public' . DS;
const APP_CONFIG_PATH = __DIR__ . DS . 'app' . DS . 'Config' . DS;
require APP_CONFIG_PATH . 'Config.php';
// Location of the Paths config file.
// This is the line that might need to be changed, depending on your folder structure.
$pathsPath = COREAPP . 'Config/Paths.php';
// ^^^ Change this line if you move your application folder
require $pathsPath;
$paths = new Config\Paths();

// Ensure the current directory is pointing to the front controller's directory
chdir(FCPATH);

$app = require rtrim($paths->systemDirectory, '/ ') . '/bootstrap.php';


require_once SYSTEMPATH . 'Config/DotEnv.php';
(new CodeIgniter\Config\DotEnv(ROOTPATH))->load();
(new CodeIgniter\Config\DotEnv(realpath(FCPATH . DS . '..')))->load();

// Grab our CodeIgniter
$app = Config\Services::codeigniter();
$app->initialize();
$app->setContext('spark');

// Grab our Console
$console = new CodeIgniter\CLI\Console($app);

// We want errors to be shown when using it from the CLI.
error_reporting(-1);
ini_set('display_errors', 1);

// Show basic information before we do anything else.
if (is_int($suppress = array_search('--no-header', $_SERVER['argv'], true))) {
	unset($_SERVER['argv'][$suppress]); // @codeCoverageIgnore
	$suppress = true;
}

$console->showHeader($suppress);

// fire off the command in the main framework.
$response = $console->run();

if ($response->getStatusCode() >= 300) {
	exit($response->getStatusCode());
}
